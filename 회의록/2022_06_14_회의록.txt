SEF에서 Trajecotry를 찾을 때 
공격이 없는 경우의 SEF 동작 과정을 standard behavior로 하여 공격이 발생한 경우에 SEF 동작 과정을 비교하였음

공격이 발생 하였을 때 공격자가 센서 노드들을 손상시켜 보고서에 존재하는 키 값을 완벽하게 획득하여 MAC을 완벽하게 위조한 경우를
제외하고는 MAC을 통해서 허위 보고서 공격 발생 탐지 유무를 확인 할 수 있음=>이 부분에서는 Trajectory를 찾을 수 없었음
따라서 다른 각도에서 생각을 해봤음.

첫번째는 중간 노드 필터링 단계에서 MAC을 확인 할 때 갖고 있는 키와 보고서에 존재하는 LE, t, E를 통해 MAC을 다시 생성해서
보고서에 존재하는 MAC과 일치하는지 확인한다. 이때 다르다면 보고서를 삭제한다.
CoS를 선출 할 때 이벤트 감지 노드의 {LE, t, E}의 보고서와 CoS 노드의 {LE, t, E}의 보고서가 오차 범위 내라면 이벤트 감지 노드의 
{i, Mi}를 CoS에게 전달하게 됩니다. 결국 이벤트 감지 노드의 {LE, t, E}와 보고서에 존재하는 {LE, t, E}의 내용이 다른 경우가 있을 수 있기 
때문에 같은 키로 MAC을 생성하였을 때 보고서에 존재하는 MAC과 새로 생성한 MAC의 값이 다르게 되고, 보고서는 삭제 됩니다.
위와 같은 경우 허위 보고서가 아님에도 보고서가 삭제되는 결과가 발생하게 됩니다.
=>공격 탐지 비율에서 위양성율(False positive)비율이 높음

두번째는 허위 데이터 삽입 공격에 대한 domain 지식이 부족한것 같아서 논문을 찾아서 읽다보니깐, 허위 데이터 삽입 공격의 목적이
잘못된 데이터를 기지국에 전달하여 잘못된 행위를 유발하는 목적도 있지만, 의도적으로 보고서를 전달하지 않고 삭제되도록 하여
센서 노드의 에너지 리소스를 고갈 시키도록 하는 목적도 있었습니다. 
근데 SEF의 경우 MAC을 통해 보고서의 위조 여부를 확인하지만 어떤 노드에서 허위 데이터가 주입되었는지는 알 수 없습니다. 
따라서 보고서에 노드 ID를 추가하는 방법을 생각하고 있는데 어떤식으로 이용해야 할지는 아직 정리가 되지 않았습니다.

그래서 첫번째와 두번째 {LE, t, E}의 정보와 어떤 노드에서 허위 데이터가 주입 되었는지 알기 위한 방법으로 노드ID를 Trajectory로
활용할 수 있을 것 같아서 지금 방법을 생각 중에 있습니다.
============================================================================
연구 내용

정상적인 SEF의 Trajectory와 공격이 발생했을때의 SEF Trajectory(비정상 Trajectory=공격이 발생했을 때 Trajectory)
두가지 내용을 Timing diagram으로 표현해야함!
만약 Trajectory가 보이지 않는다면 더 깊이 있게 들어가서 연구를 진행해야함!

양을 봐가면서 하면 됨! 일단 Timing diagram을 표현하는게 젤 중요함!!
두개의 Trajectory(정상적인+공격이 발생했을 때)가 완성이 되면 그걸 활용하여 기존의 기법보다 발전되도록 만들어야 함

다른연구에 비해서 어떤 면에서 장점이 있는 걸까?
=>Trajectory는 시간을 포함하고 있기 때문에 기존의 방어 기법의 경우 시간 값을 포함하고 있지 않기 때문에  
Trajectory를 사용한다면 시간을 표현 할 수 있다는 장점이 있다.

Trajectory는 그림임 그럼 그 그림은 어떻게 이용해야하는가?
=>알고리즘도 있고 그걸 어떻게 이용해야 할까?
=>Temporal logic과 같은 rule을 base로 Trajectory를 표현하여 보안성을 향상시킬 수 있다.
일단 중요한건 Trajectory를 Temporal logic으로 표현한다는것.
Timing diagram은 사람이 보려고 그린것, 근데 프로그램은 그림을 알아들을 수 없음
컴퓨터가 알아듯게 하기 위해서 Trajectory를 Temporal logic으로 표현하는 것임
그럼 그 다음에는 문제를 해결할 수 있음. 프로그램으로 문제를 먼저 표현하고 거기에 추가적인 알고리즘을 활용해서 문제를 해결
Trajectory를 Temporal logic으로 표현한다음에 그걸 활용해서 문제를 해결하는 것임. 표현을 하면 이용을 할 수 있음

예를 들면 수학 공식을 세우고 문제를 푸는 것처럼 일단 표현을 하는게 먼저임.
수학 공식 대신에 Temporal logic으로 표현하여 문제를 해결하도록 하는 것임.
문제 표현이라는 것이 굉장히 중요한것, 어떻게 표현을 하느냐에 따라서 어떻게 푸는게 정해지는 것임

도메인에서 보안 문제 설정이 되면, 각자 프로토콜이 있을 것이고, 그 방법대로 문제를 해결하기 위해서 Trajectory들을 구성하고
그것을 놓고 어떤 것을 이용하면 되겠다, 라는 것이 결정이 되면 알고리즘이 나온 것 그것을 Temporal logic으로 표현하는 것
그리고 실행을 하면 Modeling도 해야함. 그러면 이제 실행을 해서 그래프 그리면 되는것->이게 최종적인 목표

False Positive 비율을 낮추는 것을 목표로 하는 것도 기여가 되는 것임.
기여가 현실세계에서 문제가 될 수 있는 것을 방지 할 수 있겠구나 하는 부분을 찾으면 좋은 논문에 제출할 수 있음
False Negative를 건들이지 않고 하는게 제일 좋지만 어떤 부분이냐에 따라서 중요한 부분에 따라서 기여가 될 수 있음
연구 결과는 일반성이 많은게 좋음. 
현실세계에서 도움이 된다고 하면 되는 거임.

1. Trajectory를 찾기=>이 부분을 하나만 놓고 볼 것인지, 아니면 그래프에서 여러개를 두고 볼 것인지 생각해서 어쨌든 보안성을 
향상 시킬 수 있는 Trajectory 찾기
2. Temporal logic 사용하기=>찾은 Trajectory를 Temporal logic으로 표현하여 사용하기
3. Temporal logic으로 rule을 구성해서 그 rule을 하나의 모델로 표현하기
4. Temporal logic으로 구현된 model을 결합하여 coupling할 때 coupling도 하나의 model로 표현하기
각자 children model은 하나의 Trajectory로 표현
coupled model의 rule로 표현 되는 것임 coupled model 모델에서는 children model하나하나가 변수로 표현 됨
여러가지의 관계를 파악하고 싶으면 rule 하나가 관계 하나임. 하나의 사실을 만들기 위해서 rule 하나가 필요함
하나를 유도하기 위해서(유도에 시간 개념이 들어 간다는 것 뿐이지)하나의 사실을 알기 위해서 rule 하나가 필요한건 똑같으니깐
관계 하나하나가 rule로 표현 될 수 있는 것임! coupled model 안에서 rule이 여러개일 수 있음.
