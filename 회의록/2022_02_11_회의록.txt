기존에 했던 문제를 더 발전시키고 심화시키는 과정이 더 좋을 수 있음.
이번에는 temporal logic을 추가해서 하는것이기 때문에 

아무래도 기존에 하는거랑은 달라질것임 자연스럽게
내가 이미 알고있는 지식을 활용하는게 유리할것임! 어차피 새로운것을 해서 trajectory=rule 
기존에 연구를 확장해서 trajectory를 이용해서 하나 
다른 기법을 trajectory를 이요해서 하나 연구 기여도는 같음
주요 문제는 어느 기법에서 trajectory를 찾는데 유리한가가 중요함

기존에 있는 지식을 가지고 trajectory를 형성을 할려고 하다보면 속성을 알게 되고, 안나오면 왜 안나왔구나
나오면 어떻게 해서 나왔구나 이런걸 알 수 있음

기존에 알고있던 내용을 활용하는 것이 좋은 것임! 

trajectory 찾는 것. 어떤 결과가 있음(보안 처리상에) 그 결과가 항상 그 결과만 있으면 보안 처리 상에 
이전에 값에 의미에 따라 현재의 값이 달라지는것을 생각해 보면 알 수 있음
현재 값이 절대적인 값인지 이전에 값에 따라 현재 값이 의미가 있는건지를 생각해 보면 알 수 있음.
조금더 확장에서 보면 이전보다 이전의 값에 따라 또 현재의 값이 달라질 수 있음.

trajectory를 찾는 것이 더 유용한걸 주제로 잡을 것!
도메인에 관련되어서 좀 더 
받는쪽 끝에서 어디서 왔는지를 보면 그게 trajectory임 
어디서 왔냐에 따라 의미가 달라짐. 하지만 현재 노드에서 정보를 활용하는 것은 과거값은 아니고 현재 값임
이전에 값이 현재 값에 도우밍 되면 그게 초기에 trajectory를 구현하기 좋음.

시점을 뒤로 옮기면 같은 의미임!! 
그런 rule은 그 모델에서 적용한다기 보다는 그런 일이 일어나고 있는 것은 여러개의 (시뮬레이션)모델이고 여러 오브젝트에서 일어나는것
parent에서 적용이 되는 것임 A라는 노드에서 어떤값이고 next는 B라는 노드에서 어떤 값이고 사실 차이는 없음
시간이 들어가면 언제라는 것이 중요한 것.

현실세계에서는 하나의 일이 처리되는 동안 그 중간에 다른 일이 발생할 수 있기 때문에 현실세계에서는 시간이 중요함.

reactive system임 무시할 수 없는 시스템
특히나 IoT는 그런걸 무시하면 절대 성립이 될 수 없음.

일은 childeren 모델에서 일어나는 것! 그 rule은 모델링 배웠으니깐 parent 모델에서 적용이 되는 것임! 
행동은 atomic model이 하고 rule은 coupled model이 행동하는 것임!
어느 시점이 주체가 되느냐에 따라 미래 지향적으로 얘기할 수도 있고 과거로 얘기할 수도 있음!

현재 어떤 일을 처리하는데 이전에 어떤 처리를 겪었느냐에 따라 값이 달라짐!!!

공격이 들어오는 배경은 IoV환경에 
CS의 현 시점에서 차량이 많이 지나간다
1분전 상황에서 정상적이 였으면 CS에서 확인 한 것처럼 많이 지나갔다고 알지만
공격이 들어왔을 경우에는 한대만 있어도 CS에서는 여러대의 차가 있다고 인식 함!
한대의 차량이 다수의 아이디를 가진 report를 CS에게 보내서 속이는 공격(Sybil attack)
현 시점의 trajectory는 차량의 주행 정보 (connecting disconnecting)을 통해 
차량이 지나갈 때마다 RSU는 그 차량의 정보를 수집할 수 있음
