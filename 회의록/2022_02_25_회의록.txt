trajectory: 시간이 흐르면서 어떤 정보를 모은것!
언제가 중요한것! 순서만 있는건 큰 의미가 없고 언제 일어났다. 
시그마: 간격을 표시하는 것!
간격에 대한 정보가 없으면 시간에 처리가 의미가 없음

언제가 중요한것!! 시그마가 값이 다 똑같지 않음. 

trajectory라고 해서 그 개념이 뭐냐에 대한 답은 timing diagram이 trajectory임
trajectory를 통해서 내가 중요한 정보를 표현하는것

문제를 해결할 때 표현을 하고 문제를 해결한다.
문제가 있으면 식을 세운다. =>이것의 의미는 표현했다는 의미
trajectory는 입력도 되지만 문제 해결을 위한 도메인에 대한 동적 특성을 설명한것
그 표현된것을 가지고 이후에 문제 해결을 해야하는 것!

식을 세워서 문제를 푼다. 식을 세운게 아니라 다른 방법으로 표현을 한다면 그 방법으로 문제를 풀어야 한다.
주어진 데이터만 가지고 문제를 풀 수 밖에 없는 것
데이터 혹은 정보가 프로그램 상에 존재해야 한다는 의미

state transition diagram에 없는 정보를 활용 할 수는 없음.
그 안에 존재하는 정보를 사용해야 하기 때문에 그 안에 사용 할 수 있는 모든 것들이 다 들어가는게 좋음

trajectory만 사용하는 것과 trajectory+다른 정보를 활용하는 것

box가 함수를 표현 한것임
그게 modularity를 제공하는 것임

null 입력이 있고 null 출력이 있는 것임

state trajectory는 system 내부의 일임
그 궁금한걸 trajectory로 파악을 할 것인가? 

어떤 값이 trajectory를 표현을 하는 가?
그래프에서 x값과 y값을 알아야 한다. state, t
그래프 모양을 알기 위해서는 x값과 y값만 있으면 알 수 있음.
state는 상태변수 값의 모임을 
phase라는게 state를 저장해놓는 모임
sigma는 시간이 저장되어 있는 모임임

그럼 거꾸로 그래프가 있음 그걸 보고 알 수 있는 것
그래프를 보면 x,y값을 알 수 있는 것임
그래프에 표현을 안 하면 알 수 없음

답이 되었음!!

그걸 통해서 다음 계산이 이루어지기 때문에 어떤 정보가 중요하면 trajectory에 표현해야 하는 것
아니면 모르기 때문에 알 수 없음

그렇다면 trajectory에 나타나지 않으면 계산이 되지 않는가?
trajectory값과 다른 상태변수 값을 같이 사용할 수 있음
input 값이 하나만 있을 필요는 없는 것!!
필요한 값이 있다면 input이 늘어날 수 있음!!
state trajectory관점에서 그것만 보고 계산이 안 될 수 있지만
다른 모델이나 분석이나 평가를 할때 trajectory+다른 값을 받아올 수 있으면 활용할 수 있음

timing diagram을 보고 시스템을 이해할때는 아주 불편함!! 그렇기 때문에 timing diagram에 다 표현되는게 좋음
phase가 끝나지 않으면 출력이 나올 수 없기 때문에 분리를 해야하는 것임!!
adoptation, evolution, 변화를 가져올 수 없는 프로그램은 사용하지 않는것이 좋음!!

state 끝에 출력을 하는 것이 좋음!! 왜냐하면 state 가 변하지 않으면 출력값의 의미가 거의 없기 때문임!!
시간이라는 단순한 요인이 일반 프로그램에서와 다르게 많은 변화가 있음

input port가 여러개고 state trajectory가 여러개라면 완전히 독립적인 프로그램임
만약에 아니라면 input port가 여러개더라도 state trajectory가 여러개가 아닐 수도 있음
대상 시스템이 어떻게 실행이 되느냐에 따라 다름!!
모델은 그냥 그걸 표현하면 됨!!
대상 시스템에서 어떤 구조로 어떤 연산이 일어나는가
엘리베이터가 있다하면 버튼 입력도 받고, 현재 층도 받고 인원 정보도 받고 시간이 흐르면서 그게 다 표현이 되면서
그게 다 중요한 정보가 되는것! 

두번째 질문이 추상화의 일환임!! 크게 보면 모든 프로그래밍이 코딩 빼놓고는 전부다 추상화 과정
대상 문제가 설정이 되면 모든 디자인 과정이 추상화 과정에 해당이 되는것임
아까 그건 디자인 추상화 과정이 시간이 개입이 된 추상화 과정인 것임!
이전에 data structure나 algorithm에서 경험하지 못했던 추상화를 한것임

목적이 정해지고나면 그 방법으로만 해야하는 것은 아님 목적에 따라서 다른 방법이 있음
가장 효율적인 방법이 나올 수 있음
좋은 효율적인 것을 찾을 수 있음

