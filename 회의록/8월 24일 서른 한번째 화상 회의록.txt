rule 이 여러개 있으면 true 인가 false인가를 확인 해봐야함 rule evaluationg할때 condition의 pattern matching임
값이 symbolic하게 있으므로 pattern matching이라고 함
평가하면 1개 이상의 true 값이 나오면 conflict resolution
서로 반대 방향으로 갈 수 가 있음 날씨가 맑으면 우산을 써 , 날씨가 맑으면 우산을 접어 이 두개가 있으면 안됨
둘중에 하나를 정해야 하는데 이게 conflict resolution(충돌을 해결하다)
상충되는 부분을 해결한다. 
해결 하면 rule이 하나만 남는데 fire는 액션을 실행한다는 의미. cylcle의 최종 단계에서 하는 것.
여러개의 컨디션 중에서 어떻게 고르느냐 conflict strategy 
단순하게 생각하면 rule의 번호가 낮은게 더 높다,(그부분은 읽어 볼것)
rule oredering=>Zookeeper. rule 번호의 순방향으로 주던지 역방향으로 주던지

컨디션이 많은 경우에 우선순위를 주고, 많아도 서로 다른게 많은게 아니라 superset이면 우선순위를 준다 
상황을 자세하게 묘사한것 Condition이 많다는 얘기는.
Zookeeper는 최근에 fire한 rule을 
논리적으로 지식을 활용만 할 수 있으면 되는것
지식의 내용과 지식 내용에 따라서 rule을 형설하는데 rule 건설과 conflict resolution와는 연결이 되어있는것임
Zookeeper에 bagger를 대입해보고 bagger에 Zookeeper를 대입해서 왜 안되는지 생각해 볼것(control strategy를 바꿔서 생각해보면)
단편적으로 지식이 습득했을때마다 rule을 논리적 구조에 맞게 틀에 맞게 생성해야함. 
Bagger system 위주로 다시 읽어볼것. 놓쳤던 부분을 이해하려고 다시 읽어 보고 서로 바꿔서 conflict resolution을 대입해서 왜 안되나
파악해볼것
이후에 나머지 rule 형태 Fuzzy rule, temperal rule 기본적인 rule base를 이해하고 하면 매우 쉬워짐.
knowlege base를 만드는 중임
implication이 결국 rule이라는 것(이것도 확인해볼것)

Zookeeper에는 단계를 식별하는 assertion(주장)이 포함되어있지 않음. 하지만 Bagger의 경우 단계를 식별하는 경우가 포함되어 있음
또한 Bagger의 경우에 check order-step으로 고객에게 물건을 추천하거나 하는 단계가 포함되지만 Zookeeper의 경우 필요하지
조건을 추천할 필요가 없음

Zookeeper에서는 conflict resolution을 사용하지 않았지만 Bagger에서는 rule ordering을 통해 conflict resolution을 해결함
