물리적인 구간에서 50% 정도는 5-6%정도 향상 되고
나머지 구간에서는 15% 정도 낮다 해도
5-6%의 경우가 중요한것임
현실적으로 중요한 구간에서 잡아내는 것이 중요함.
기존것보다는 좋고 나쁜것에 대한 판단이 필요함.

한가지는 객관적인 불리한 요소가 포함이 안되어있는지에 대한 부분도 생각해 봐야함
유리한 면만을 목표로 해서 계산을 한 것처럼 보이지 않게 부정적인 것도 
에너지에 대한 부분에 대해서는 논문에서 언급하지 않았음
이 프로토콜에서 에너지를 많이 쓴다 적게쓴다에 대한 계산도 하지 않았음
에너지 고려하지 않은 IoT 디바이스에서 사용한다.
석사 논문에는 밝혀야 함. 에너지가 너무 많이 들면 안되기 때문에

BS보다는 에너지가 적음
센서 노드처럼 할 필요는 없지만 그래도 누구나 다 수긍할 수 있을 정도에 결론을 낼 수 있음 전기를 많이 잡아 먹는다 아니다
그정도에 대해서는 판단할 수 있어야함.

어차피 크게 보면 둘다 함수라고 생각하면 됨.
system은 입력, 출력, 내부 연산 과정
함수도 system이고, expert system도 
입력이 실제로 제공되지 않아도 입력이 있다
NULL입력이 있다. 
단순하게 하기 위해서 NULL값을 넣어서 0이라고 하는것.

입력이 없다고 말하는 상황은 없음
입력이 있고, 그거에 대해서 내부 정보나 파라미터나 합쳐서 결과를 내게됨
expert system이 있고 input이 있고 알고리즘이 있고 
inferencing engine(forward chaining)
expert system으로 구현한다고 하면 그것도 맞찮가지로 입력이 있고 , 문제 풀이 하는 내용이 있고, 출력이 나옴.
함수를 생각했을 때도 입력이 있고 내부 처리 방법이 있고 출력이 있음.
알고리즘 부분에서 어떻게 사용하느냐에 따라서 둘 중에 하나를 사용
expert system은 내부적으로 rule하고 inferencing engine이 동시에 있어야함.
합쳐서 다른 알고리즘과 차이점이 그것임 
1대 1이 되는 것. 
프로그램을 좀 깊이 하다 보면 반드시 구분을 할 수 있는게 control하고 data를 구분할 수 있어야함
알고리즘은 control하고 data가 섞여있음
expert는 control하고 data가 분리 knowledge=data정적, control=inferencing engine동적
control하고 data하고 엉켜있는 부분을 분리해서 하는 것이 expert system
분리를 해야만 knowledge가 존재함.
어떤 것을 해야하는지 
알아두면 도움이 되는게 특정 알고리즘을 rule하고 inferencing engine으로 옮길때
거의 rule만 신경쓰면 됨 rule의 내용이 알고리즘의 내용을 반영하는 것이라고 생각하면 됨
inferencing engine은 단지 rule의 내용을 처리해주는 추론을 해주는 기관에 불과한것. 

특정 알고리즘이 expert로 변환이 된다면 rule design임, modelling하는 것과 같음
어떤 대상 시스템을 모델로 표현할 때 modelling을 하지 system을 바꾸지는 않음
system을 디자인 할때 intelligent 하면 이면을 생각해야함.
software는 지식이나 이론에 대한 것. 프로그래밍 기술은 한정되어 있는 것.
좋은 소프트웨어를 구성할수록 지식이 많이 차지 함.

//
모델에서 물리적인 의미인지 input의 의미인지 확인 해야함.

